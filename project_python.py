# -*- coding: utf-8 -*-
"""Project Python

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B-HhZ5NTLPL09QOMWrpbOH5sDwaGKanm

# Final Project Python
"""



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pandas.tseries.offsets import BDay

#Sumber data yang digunakan
path_od = "https://raw.githubusercontent.com/dataskillsboost/FinalProjectDA11/main/order_detail.csv"
path_pd = "https://raw.githubusercontent.com/dataskillsboost/FinalProjectDA11/main/payment_detail.csv"
path_cd = "https://raw.githubusercontent.com/dataskillsboost/FinalProjectDA11/main/customer_detail.csv"
path_sd = "https://raw.githubusercontent.com/dataskillsboost/FinalProjectDA11/main/sku_detail.csv"
df_od = pd.read_csv(path_od)
df_pd = pd.read_csv(path_pd)
df_cd = pd.read_csv(path_cd)
df_sd = pd.read_csv(path_sd)

#Menjalankan SQL di Colab
from sqlite3 import connect
conn = connect(':memory:')
df_od.to_sql('order_detail',conn, index=False, if_exists='replace')
df_pd.to_sql('payment_detail', conn, index=False, if_exists='replace')
df_sd.to_sql('sku_detail', conn, index=False, if_exists='replace')
df_cd.to_sql('customer_detail', conn, index=False, if_exists='replace')

#Query SQL untuk menggabungkan data
df = pd.read_sql("""
SELECT
    order_detail.*,
    payment_detail.payment_method,
    sku_detail.sku_name,
    sku_detail.base_price,
    sku_detail.cogs,
    sku_detail.category,
    customer_detail.registered_date
FROM order_detail
LEFT JOIN payment_detail
    on payment_detail.id = order_detail.payment_id
LEFT JOIN sku_detail
    on sku_detail.id = order_detail.sku_id
LEFT JOIN customer_detail
    on customer_detail.id = order_detail.customer_id
""", conn)

df

#Menampikan tipe data tiap kolom
df.dtypes

#Mengubah tipe data agar mudah dilakukan pengolahan data
df = df.astype({"before_discount":'int', "discount_amount":'int', "after_discount":'int',"base_price":'int'})
df.dtypes

#Mengubah tipe kolom Date menjadi Datetime
df['order_date']= pd.to_datetime(df['order_date'])
df['registered_date']= pd.to_datetime(df['registered_date'])
df.dtypes

"""# Nomor 1

**Dear Data Analyst**,
<br></br>
Akhir tahun ini, perusahaan akan memberikan hadiah bagi pelanggan yang memenangkan kompetisi **Festival Akhir Tahun**. Tim Marketing membutuhkan bantuan untuk menentukan perkiraan hadiah yang akan diberikan pada pemenang kompetisi nantinya. Hadiah tersebut akan diambil dari **TOP 5 Produk** dari Kategori **Mobiles & Tablets** selama tahun 2022, dengan jumlah kuantitas penjualan (valid = 1) paling tinggi.

Mohon bantuan, untuk mengirimkan data tersebut sebelum akhir bulan ini ke Tim Marketing. Atas bantuan yang diberikan, kami mengucapkan terima kasih.
<br></br>
Regards

**Tim Marketing**
"""

# top 5 produk, kategroi mobiles and tablet selama 2022, kuantitas penjualan valid = 1
# filter is_valid = 1, kolom, tahun
df2 = df[df['is_valid'] == 1]
df3 = df2[df2['category'] == 'Mobiles & Tablets'].sort_values(by = 'after_discount', ascending = False)
df4 = df3.loc[(df3['order_date'] >= '2022-01-01')
                     & (df3['order_date'] <= '2022-12-31')]
df5 = df4.head()
df6 = df5.set_index('sku_name')
df6

"""# Nomor 2

**Dear Data Analyst**,
<br></br>
Menindaklanjuti meeting gabungan Tim Werehouse dan Tim Marketing, kami menemukan bahwa ketersediaan stock produk dengan Kategori Others pada akhir 2022 kemarin masih banyak.
1. Kami mohon bantuan untuk melakukan pengecekan data penjualan kategori tersebut dengan tahun 2021 secara kuantitas penjualan. Dugaan sementara kami, telah terjadi penurunan kuantitas penjualan pada 2022 dibandingkan 2021. (Mohon juga menampilkan data ke-15 kategori)
<br></br>
2. Apabila memang terjadi penurunan kuantitas penjualan pada kategori Others, kami mohon bantuan untuk menyediakan data TOP 20 nama produk yang mengalami penurunan paling tinggi pada 2022 jika dibanding dengan 2021. Hal ini kami gunakan sebagai bahan diskusi pada meeting selanjutnya.  

Mohon bantuan untuk mengirimkan data tersebut paling lambat 4 hari dari hari ini. Atas bantuan yang diberikan, kami mengucapkan terima kasih.
<br></br>
Regards

**Tim Werehouse**
"""

# 2.1
# filter is_valid = 1, tahun, dan kolom

# 2021
df2_1 = df[df['is_valid'] == 1]
df2_2 = df2_1.loc[(df2_1['order_date'] >= '2021-01-01')
                     & (df2_1['order_date'] <= '2021-12-31')]
df2_4 = df2_2.filter(items = ['category', 'qty_ordered'])
df2_6 = df2_4.groupby('category').sum()

#2022
df2_3 = df2_1.loc[(df2_1['order_date'] >= '2022-01-01')
                     & (df2_1['order_date'] <= '2022-12-31')]
df2_5 = df2_4.filter(items = ['category', 'qty_ordered'])
df2_7 = df2_5.groupby('category').sum()

df2_6

df2_7

# 2.2

# 2021
df2_8 = df2_2[df2_2['category'].str.contains('Others')]
d2_10 = df2_8.filter(items = ['sku_name', 'qty_ordered'])
d2_12 = d2_10.groupby('sku_name').sum()

#2022
df2_9 = df2_3[df2_3['category'].str.contains('Others')]
d2_11 = df2_9.filter(items = ['sku_name', 'qty_ordered'])
d2_13 = d2_11.groupby('sku_name').sum()

# join table
left = d2_12
right = d2_13
tabel_1 = pd.merge(left, right, how = 'outer', on = 'sku_name')
tabel_2 = tabel_1.fillna(0)
tabel_3 = tabel_2.astype({"qty_ordered_x":'int', "qty_ordered_y":'int'})
tabel_3.rename(columns = {'qty_ordered_x':'penjualan_produk_2021', 'qty_ordered_y':'penjualan_produk_2022'}, inplace = True)
tabel_3['perbedaan'] = tabel_3['penjualan_produk_2022']-tabel_3['penjualan_produk_2021']
tabel_3

"""# Nomor 3

**Dear Data Analyst**,
<br></br>
Terkait ulang tahun perusahaan pada 2 bulan mendatang, Tim Digital Marketing akan memberikan informasi promo bagi pelanggan pada akhir bulan ini. Kriteria pelanggan yang akan kami butuhkan adalah mereka yang sudah melakukan check-out namun belum melakukan pembayaran (is_gross = 1) selama tahun 2022. Data yang kami butuhkan adalah ID Customer dan Registered Date.

Mohon bantuan, untuk mengirimkan data tersebut sebelum akhir bulan ini ke Tim Digital Marketing. Atas bantuan yang diberikan, kami mengucapkan terima kasih.
<br></br>
Regards

**Tim Digital Marketing**
"""

# filter gross = 1, valid = 0, net = 0, transaksi 2022, customer_id, dan registered_date
df3_1 = df[df['is_gross'] == 1]
df3_2 = df3_1[df3_1['is_valid'] == 0]
df3_3 = df3_2[df3_2['is_net'] == 0]
df3_4 = df3_3.loc[(df3_3['order_date'] >= '2022-01-01')
                     & (df3_3['order_date'] <= '2022-12-31')]
df3_5 = df3_4.filter(items = ['customer_id', 'registered_date'])
df3_5

"""# Nomor 4

**Dear Data Analyst**,
<br></br>
Pada bulan October hingga Desember 2022, kami melakukan campaign setiap hari Sabtu dan Minggu. Kami hendak menilai, apakah campaign tersebut cukup berdampak pada kenaikan penjualan (before_discount). Mohon bantuan untuk menampilkan data:
1. Rata-rata harian penjualan weekends (Sabtu dan Minggu) vs rata-rata harian penjualan weekdays (Senin-Jumat) per bulan tersebut. Apakah ada peningkatan penjualan pada masing-masing bulan tersebut.
2. Rata-rata harian penjualan weekends (Sabtu dan Minggu) vs rata-rata harian penjualan weekdays (Senin-Jumat) keseluruhan 3 bulan tersebut.

Mohon bantuan untuk mengirimkan data tersebut paling lambat minggu depan. Atas bantuan yang diberikan, kami mengucapkan terima kasih.
<br></br>
Regards

**Tim Campaign**
"""

# menambahkan kolom
df['day'] = df['order_date'].dt.day_name()
df['month'] = df['order_date'].dt.month_name()
df['month_num'] = df['order_date'].dt.month
df.head(1)

# filter is_valid = 1 dan tanggal
df4 = df[df['is_valid'] == 1]
df4_1 = df4.loc[(df4['order_date'] >= '2022-10-01')
                     & (df4['order_date'] <= '2022-12-31')]

# filter hari weekend dan weekday
hari_weekday = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
hari_weekend = ['Saturday', 'Sunday']

weekday = df4_1[df4_1['day'].isin(hari_weekday)]
weekend = df4_1[df4_1['day'].isin(hari_weekend)]

# group by month
weekday_1 = weekday.groupby('month')['before_discount'].mean().apply(lambda x: round(x,2)).reset_index(name='avg_profit_weekday')
weekend_1 = weekend.groupby('month')['before_discount'].mean().apply(lambda x: round(x,2)).reset_index(name='avg_profit_weekend')

# join table
left = weekday_1
right = weekend_1
t1 = pd.merge(left, right, how = 'outer', on = 'month')
t1

t1.plot(x = 'month', y = ['avg_profit_weekday', 'avg_profit_weekend'], kind = 'bar', grid = True, figsize = (5,5))